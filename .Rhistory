dir <- choose.dir()
setwd("C:/Users/jlombard/PycharmProjects/IslandModel-These")
library(readr)
Island_utputs <- read_csv("Island_utputs.csv")
View(Island_utputs)
dir <- choose.dir()
summary(Island_utputs)
taille_site = length(Island_utputs)
taille_site
taille_site = (length(Island_utputs)-1)/2
taille_site
generate_even_indexes = seq(2, taille_site, 2) # On récupère tous les indexs pairs qui correspondent aux infectés de chaque pop
generate_odd_indexes = seq(1, taille_site, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
generate_even_indexes
generate_odd_indexes
Tableau_s <- subset(Island_utputs[generate_even_indexes])
View(Tableau_s)
View(Tableau_s)
taille_col = (length(Island_utputs)-1) # On compte le nombre de sites simulés
generate_even_indexes = seq(2, taille_col, 2) # On récupère tous les indexs pairs qui correspondent aux infectés de chaque pop
generate_odd_indexes = seq(1, taille_col, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
Tableau_s <- subset(Island_utputs[generate_even_indexes])
View(Tableau_s)
View(Tableau_s)
Tableau_i <- subset(Island_utputs[generate_odd_indexes])
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
Prev <- colMeans(Tableau_i)
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
for i in length(Tableau_i) :
Prev <- colMeans(Tableau_i[i])
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
for i in 1:length(Tableau_i) :
Prev <- colMeans(Tableau_i[i])
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
for i in (1:length(Tableau_i)) :
Prev <- colMeans(Tableau_i[i])
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
for (i in 1:length(Tableau_i)) :
Prev <- colMeans(Tableau_i[i])
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
for (i in 1:length(Tableau_i))
Prev <- colMeans(Tableau_i[i])
Prev <- colMeans(Tableau_i[i,])
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
for (i in 1:length(Tableau_i))
{
Prev <- colMeans(Tableau_i[i])
}
View(Tableau_i)
View(Tableau_i)
View(Tableau_s)
View(Tableau_s)
generate_odd_indexes = seq(3, taille_col, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
View(Tableau_s)
View(Tableau_s)
View(Tableau_i)
View(Tableau_i)
Tableau_s <- subset(Island_utputs[generate_even_indexes]) # Contient l'ensemble des s(t) pour chaque site
Tableau_i <- subset(Island_utputs[generate_odd_indexes]) # Contient l'ensemble des i(t) pour chaque site
View(Tableau_i)
View(Tableau_i)
generate_odd_indexes = seq(3, taille_col+1, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
Tableau_s <- subset(Island_utputs[generate_even_indexes]) # Contient l'ensemble des s(t) pour chaque site
Tableau_i <- subset(Island_utputs[generate_odd_indexes]) # Contient l'ensemble des i(t) pour chaque site
View(Tableau_i)
View(Tableau_i)
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
for (i in 2:length(Tableau_i))
{
Prev <- colMeans(Tableau_i[i])
}
Prev
Prev <- data.frame()
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
Prev <- data.frame()
for (i in 2:length(Tableau_i))
{
Prev[i,] <- colMeans(Tableau_i[i])
}
Prev
View(Prev)
Prev <- data.frame()
for (i in 2:length(Tableau_i))
{
Prev[i,1] <- colMeans(Tableau_i[i])
}
Prev
View(Prev)
View(Prev)
View(Tableau_i)
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
Prev <- data.frame()
for (i in 2:length(Tableau_i))
{
Prev[i,1] <- rowMeans(Tableau_i[i])
}
Prev
for (i in 1:length(Tableau_i))
{
Prev[i,1] <- rowMeans(Tableau_i[i])
}
View(Tableau_i)
View(Tableau_i)
View(Island_utputs)
View(Tableau_i)
View(Tableau_i)
rowMeans(Tableau_i)
Prev <- data.frame(rowMeans)
Prev <- data.frame(rowMeans(Tableau_i))
View(Prev)
View(Prev)
Preva <- data.frame(Island_utputs$X1)
Prev[,"Prévalence"] <- rowMeans(Tableau_i))
Prev <- data.frame(Island_utputs$X1)
Prev[,"Prévalence"] <- rowMeans(Tableau_i)
View(Prev)
plot(Prev$Island_utputs.X1, Prev$Prévalence)
plot(Prev$Island_utputs.X1, Prev$Prévalence, type = 'l')
Prev <- data.frame(Island_utputs$X1)
Prev[,"Prévalence moyenne"] <- rowMeans(Tableau_i)
Prev[,'Prévalence totale'] <- rowSums(Tableau_i)
plot(Prev$Island_utputs.X1, Prev$`Prévalence totale`, type = 'l')
View(Tableau_i)
View(Tableau_i)
State_Table = data.frame()
Tableau_i[1]
library(readr)
dir <- choose.dir()
Dynamics <- read_csv("Island_outputs_dynamics.csv")
taille_col = (length(Dynamics)-1) # On compte le nombre de sites simulés
generate_even_indexes = seq(2, taille_col, 2) # On récupère tous les indexs pairs qui correspondent aux infectés de chaque pop
generate_odd_indexes = seq(3, taille_col+1, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
Tableau_s <- subset(Dynamics[generate_even_indexes]) # Contient l'ensemble des s(t) pour chaque site
Tableau_i <- subset(Dynamics[generate_odd_indexes]) # Contient l'ensemble des i(t) pour chaque site
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
Prev <- data.frame(Dynamics$X1)
Prev[,"Prévalence moyenne"] <- rowMeans(Tableau_i)
Prev[,'Prévalence totale'] <- rowSums(Tableau_i)
#Figures (non acrobatiques)
plot(Prev$Dynamics.X1, Prev$Prévalence, type = 'l') # Pas foufou
plot(Prev$Dynamics.X1, Prev$`Prévalence totale`, type = 'l') # Pas foufou non plus
States <- read_csv("Island_outputs_states.csv")
View(States)
View(States)
View(States)
View(Tableau_i)
View(Tableau_i)
library(readr)
Dynamics <- read_csv("Island_outputs_dynamics.csv")
taille_col = (length(Dynamics)-1) # On compte le nombre de sites simulés
generate_even_indexes = seq(2, taille_col, 2) # On récupère tous les indexs pairs qui correspondent aux infectés de chaque pop
generate_odd_indexes = seq(3, taille_col+1, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
Tableau_s <- subset(Dynamics[generate_even_indexes]) # Contient l'ensemble des s(t) pour chaque site
Tableau_i <- subset(Dynamics[generate_odd_indexes]) # Contient l'ensemble des i(t) pour chaque site
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
Prev <- data.frame(Dynamics$X1)
Prev[,"Prévalence moyenne"] <- rowMeans(Tableau_i)
Prev[,'Prévalence totale'] <- rowSums(Tableau_i)
#Figures (non acrobatiques)
plot(Prev$Dynamics.X1, Prev$Prévalence, type = 'l') # Pas foufou
plot(Prev$Dynamics.X1, Prev$`Prévalence totale`, type = 'l') # Pas foufou non plus
for (i in 1:length(States))
{
i
}
States <- read_csv("Island_outputs_states.csv")
for (i in 1:length(States))
{
i
}
length(States)
i
for (i in 1:length(States))
{
i
}
N_DFE = sum(States[i]=='DFE')
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
States <- read_csv("Island_outputs_states.csv")
View(States)
View(States)
Count_states = data.frame()
for (i in 1:length(States))
{
Count_states[i,1] = sum(States[i]=='DFE')
Count_states[i,2] = sum(States[i]=='END')
Count_states[i,3] = sum(States[i]=='VIDE')
Count_states[i,4] = sum(States[i]=='N')
}
View(Count_states)
View(Count_states)
View(States)
View(States)
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
colnames(Count_states)<- c('DFE', 'END', 'VIDE', 'NA')
for (i in 1:length(States))
{
Count_states[i,1] = sum(States[i]=='DFE')
Count_states[i,2] = sum(States[i]=='END')
Count_states[i,3] = sum(States[i]=='VIDE')
Count_states[i,4] = sum(States[i]=='NA')
}
View(Count_states)
View(Count_states)
Count_states<- colnames(c('DFE', 'END', 'VIDE', 'NA'))
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
Count_states<- colnames(c('DFE', 'END', 'VIDE', 'NA'))
for (i in 1:length(States))
{
Count_states[i,1] = sum(States[i]=='DFE')
Count_states[i,2] = sum(States[i]=='END')
Count_states[i,3] = sum(States[i]=='VIDE')
Count_states[i,4] = sum(States[i]=='NA')
}
Count_states = data.frame(c('DFE', 'END', 'VIDE', 'NA'))
View(Count_states)
View(Count_states)
Count_states = data.frame('DFE', 'END', 'VIDE', 'NA')
View(Count_states)
View(Count_states)
Count_states<- colnames(c("DFE", "END", "VIDE", "NA"))
Count_states = data.frame()
colnames(Count_states)<- c("DFE", "END", "VIDE", "NA")
Count_states = data.frame()
colnames(Count_states)<- c('t',"DFE", "END", "VIDE", "NA")
colnames(Count_states)<- c('t',"DFE", "END", "VIDE")
for (i in 1:length(States))
{
Count_states[i,1] = sum(States[i]=='DFE')
Count_states[i,2] = sum(States[i]=='END')
Count_states[i,3] = sum(States[i]=='VIDE')
Count_states[i,4] = sum(States[i]=='NA')
}
colnames(Count_states)<- c("DFE", "END", "VIDE", "NA")
View(Count_states)
View(Count_states)
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
for (i in 1:length(States))
{
Count_states[i,1] = i
Count_states[i,2] = sum(States[i]=='DFE')
Count_states[i,3] = sum(States[i]=='END')
Count_states[i,4] = sum(States[i]=='VIDE')
Count_states[i,5] = sum(States[i]=='NA')
}
colnames(Count_states)<- c("t","DFE", "END", "VIDE", "NA") # Renommer les colonnes correctement sinon c'est moche
View(Count_states)
View(Count_states)
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites')
lines(Count_states$END)
lines(Count_states$VIDE)
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites', ylim = c(0, 100))
lines(Count_states$END)
lines(Count_states$VIDE)
Dynamics <- read_csv("Island_outputs_dynamics.csv")
taille_col = (length(Dynamics)-1) # On compte le nombre de sites simulés
generate_even_indexes = seq(2, taille_col, 2) # On récupère tous les indexs pairs qui correspondent aux infectés de chaque pop
generate_odd_indexes = seq(3, taille_col+1, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
Tableau_s <- subset(Dynamics[generate_even_indexes]) # Contient l'ensemble des s(t) pour chaque site
Tableau_i <- subset(Dynamics[generate_odd_indexes]) # Contient l'ensemble des i(t) pour chaque site
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
Prev <- data.frame(Dynamics$X1)
Prev[,"Prévalence moyenne"] <- rowMeans(Tableau_i)
Prev[,'Prévalence totale'] <- rowSums(Tableau_i)
#Figures (non acrobatiques)
plot(Prev$Dynamics.X1, Prev$Prévalence, type = 'l') # Pas foufou
plot(Prev$Dynamics.X1, Prev$`Prévalence totale`, type = 'l') # Pas foufou non plus
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
for (i in 1:length(States))
{
Count_states[i,1] = i
Count_states[i,2] = sum(States[i]=='DFE')
Count_states[i,3] = sum(States[i]=='END')
Count_states[i,4] = sum(States[i]=='VIDE')
Count_states[i,5] = sum(States[i]=='NA')
}
colnames(Count_states)<- c("t","DFE", "END", "VIDE", "NA") # Renommer les colonnes correctement sinon c'est moche
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites', ylim = c(0, 100))
lines(Count_states$END)
lines(Count_states$VIDE)
View(States)
View(States)
View(Count_states)
Dynamics <- read_csv("Island_outputs_dynamics.csv")
taille_col = (length(Dynamics)-1) # On compte le nombre de sites simulés
generate_even_indexes = seq(2, taille_col, 2) # On récupère tous les indexs pairs qui correspondent aux infectés de chaque pop
generate_odd_indexes = seq(3, taille_col+1, 2) # On récupère tous les indexs imparis qui correspondent aux susceptibles de chaque pop
Tableau_s <- subset(Dynamics[generate_even_indexes]) # Contient l'ensemble des s(t) pour chaque site
Tableau_i <- subset(Dynamics[generate_odd_indexes]) # Contient l'ensemble des i(t) pour chaque site
#Prévalence Totale de l'infection dans la métapop ( densité globale d'individus infectés)
length(Tableau_i)
Prev <- data.frame(Dynamics$X1)
Prev[,"Prévalence moyenne"] <- rowMeans(Tableau_i)
Prev[,'Prévalence totale'] <- rowSums(Tableau_i)
#Figures (non acrobatiques)
plot(Prev$Dynamics.X1, Prev$Prévalence, type = 'l') # Pas foufou
plot(Prev$Dynamics.X1, Prev$`Prévalence totale`, type = 'l') # Pas foufou non plus
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
for (i in 1:length(States))
{
Count_states[i,1] = i
Count_states[i,2] = sum(States[i]=='DFE')
Count_states[i,3] = sum(States[i]=='END')
Count_states[i,4] = sum(States[i]=='VIDE')
Count_states[i,5] = sum(States[i]=='NA')
}
colnames(Count_states)<- c("t","DFE", "END", "VIDE", "NA") # Renommer les colonnes correctement sinon c'est moche
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites', ylim = c(0, 100))
lines(Count_states$END)
lines(Count_states$VIDE)
View(States)
View(States)
View(States)
View(States)
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
for (i in 1:length(States))
{
Count_states[i,1] = States[i]
Count_states[i,2] = sum(States[i]=='DFE')
Count_states[i,3] = sum(States[i]=='END')
Count_states[i,4] = sum(States[i]=='VIDE')
Count_states[i,5] = sum(States[i]=='NA')
}
colnames(Count_states)<- c("t","DFE", "END", "VIDE", "NA") # Renommer les colonnes correctement sinon c'est moche
View(Count_states)
View(Count_states)
States <- read_csv("Island_outputs_states.csv")
Count_states = data.frame()
for (i in 1:length(States))
{
Count_states[i,1] = States[i,1]
Count_states[i,2] = sum(States[i,]=='DFE')
Count_states[i,3] = sum(States[i,]=='END')
Count_states[i,4] = sum(States[i,]=='VIDE')
Count_states[i,5] = sum(States[i,]=='NA')
}
colnames(Count_states)<- c("t","DFE", "END", "VIDE", "NA") # Renommer les colonnes correctement sinon c'est moche
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites', ylim = c(0, 100))
View(Count_states)
View(Count_states)
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites',xlim = c(0, length(Count_states)) ylim = c(0, 100))
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites',xlim = c(0, length(Count_states), ylim = c(0, 100))
lines(Count_states$VIDE)
# Graphe de la dynamique des états des sites
plot(Count_states$t, Count_states$DFE, type = 'l', xlab = 'temps', ylab = 'Densité de sites',xlim = c(0, 100), ylim = c(0, 100))
lines(Count_states$END)
lines(Count_states$VIDE)
